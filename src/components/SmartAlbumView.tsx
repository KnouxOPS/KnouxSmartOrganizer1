import React, { useState, useEffect, useMemo } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
} from "@/components/ui/dropdown-menu";
import { cn } from "@/lib/utils";
import {
  Folder,
  FolderPlus,
  Search,
  Filter,
  Grid3X3,
  List,
  Calendar,
  MapPin,
  Users,
  Camera,
  Heart,
  Star,
  Tag,
  Clock,
  TrendingUp,
  Activity,
  MoreHorizontal,
  Edit3,
  Share2,
  Download,
  Trash2,
  Archive,
  Settings,
  Shuffle,
  Play,
  Pause,
  SkipForward,
  SkipBack,
  Volume2,
  Maximize2,
  MinusCircle,
  PlusCircle,
  RefreshCw,
  SortAsc,
  SortDesc,
  Eye,
  EyeOff,
  Lock,
  Unlock,
  FileImage,
  Palette,
  Target,
  Brain,
  Zap,
  Sparkles,
} from "lucide-react";

interface SmartPhoto {
  id: string;
  name: string;
  previewUrl: string;
  thumbnailUrl?: string;
  size: number;
  dimensions: { width: number; height: number };
  format: string;
  created_at: Date;
  tags: string[];
  smart_categories: string[];
  quality_score: number;
  aesthetics_score: number;
  faces_count: number;
  objects_count: number;
  has_text: boolean;
  location?: { lat: number; lng: number; name?: string };
  camera_info?: Record<string, any>;
  dominant_colors: string[];
  is_favorite: boolean;
  is_selected: boolean;
}

interface SmartAlbum {
  id: string;
  name: string;
  description?: string;
  type: "manual" | "smart" | "auto";
  cover_photo?: SmartPhoto;
  photos: SmartPhoto[];
  created_at: Date;
  updated_at: Date;
  tags: string[];
  color_theme?: string;
  is_private: boolean;
  is_archived: boolean;
  rules?: {
    conditions: Array<{
      field: string;
      operator: string;
      value: any;
    }>;
    sort_by: string;
    sort_direction: "asc" | "desc";
    limit?: number;
  };
  stats: {
    total_photos: number;
    total_size: number;
    avg_quality: number;
    faces_count: number;
    locations_count: number;
    date_range: { start: Date; end: Date };
  };
}

interface SmartAlbumViewProps {
  albums: SmartAlbum[];
  selectedAlbum?: SmartAlbum;
  onAlbumSelect?: (album: SmartAlbum) => void;
  onAlbumCreate?: (name: string, type: SmartAlbum["type"]) => void;
  onAlbumUpdate?: (albumId: string, updates: Partial<SmartAlbum>) => void;
  onAlbumDelete?: (albumId: string) => void;
  onPhotoAction?: (
    action: string,
    photoIds: string[],
    albumId?: string,
  ) => void;
  viewMode?: "grid" | "list" | "timeline" | "map" | "slideshow";
  showStats?: boolean;
  enableAutoAlbums?: boolean;
}

export function SmartAlbumView({
  albums,
  selectedAlbum,
  onAlbumSelect,
  onAlbumCreate,
  onAlbumUpdate,
  onAlbumDelete,
  onPhotoAction,
  viewMode = "grid",
  showStats = true,
  enableAutoAlbums = true,
}: SmartAlbumViewProps) {
  const [searchQuery, setSearchQuery] = useState("");
  const [filterType, setFilterType] = useState<
    "all" | "manual" | "smart" | "auto"
  >("all");
  const [sortBy, setSortBy] = useState<"name" | "date" | "size" | "photos">(
    "date",
  );
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("desc");
  const [selectedPhotos, setSelectedPhotos] = useState<Set<string>>(new Set());
  const [isCreatingAlbum, setIsCreatingAlbum] = useState(false);
  const [newAlbumName, setNewAlbumName] = useState("");
  const [editingAlbum, setEditingAlbum] = useState<string | null>(null);
  const [slideshowMode, setSlideshowMode] = useState(false);
  const [currentSlideIndex, setCurrentSlideIndex] = useState(0);

  // إنشاء ألبومات ذكية تلقائية
  const autoGeneratedAlbums = useMemo(() => {
    if (!enableAutoAlbums) return [];

    const allPhotos = albums.flatMap((album) => album.photos);
    const autoAlbums: SmartAlbum[] = [];

    // ألبوم "الكل"
    if (allPhotos.length > 0) {
      autoAlbums.push({
        id: "all-photos",
        name: "جميع الصور",
        type: "auto",
        photos: allPhotos,
        created_at: new Date(),
        updated_at: new Date(),
        tags: [],
        is_private: false,
        is_archived: false,
        cover_photo: allPhotos[0],
        stats: {
          total_photos: allPhotos.length,
          total_size: allPhotos.reduce((sum, p) => sum + p.size, 0),
          avg_quality:
            allPhotos.reduce((sum, p) => sum + p.quality_score, 0) /
            allPhotos.length,
          faces_count: allPhotos.reduce((sum, p) => sum + p.faces_count, 0),
          locations_count: allPhotos.filter((p) => p.location).length,
          date_range: {
            start: new Date(
              Math.min(...allPhotos.map((p) => p.created_at.getTime())),
            ),
            end: new Date(
              Math.max(...allPhotos.map((p) => p.created_at.getTime())),
            ),
          },
        },
      });
    }

    // ألبوم المفضلات
    const favoritePhotos = allPhotos.filter((p) => p.is_favorite);
    if (favoritePhotos.length > 0) {
      autoAlbums.push({
        id: "favorites",
        name: "المفضلة",
        type: "auto",
        photos: favoritePhotos,
        created_at: new Date(),
        updated_at: new Date(),
        tags: ["مفضلة"],
        color_theme: "#ef4444",
        is_private: false,
        is_archived: false,
        cover_photo: favoritePhotos[0],
        stats: {
          total_photos: favoritePhotos.length,
          total_size: favoritePhotos.reduce((sum, p) => sum + p.size, 0),
          avg_quality:
            favoritePhotos.reduce((sum, p) => sum + p.quality_score, 0) /
            favoritePhotos.length,
          faces_count: favoritePhotos.reduce(
            (sum, p) => sum + p.faces_count,
            0,
          ),
          locations_count: favoritePhotos.filter((p) => p.location).length,
          date_range: {
            start: new Date(
              Math.min(...favoritePhotos.map((p) => p.created_at.getTime())),
            ),
            end: new Date(
              Math.max(...favoritePhotos.map((p) => p.created_at.getTime())),
            ),
          },
        },
      });
    }

    // ألبوم الصور عالية الجودة
    const highQualityPhotos = allPhotos.filter((p) => p.quality_score > 0.8);
    if (highQualityPhotos.length > 0) {
      autoAlbums.push({
        id: "high-quality",
        name: "عالية الجودة",
        type: "auto",
        photos: highQualityPhotos,
        created_at: new Date(),
        updated_at: new Date(),
        tags: ["جودة عالية"],
        color_theme: "#10b981",
        is_private: false,
        is_archived: false,
        cover_photo: highQualityPhotos[0],
        stats: {
          total_photos: highQualityPhotos.length,
          total_size: highQualityPhotos.reduce((sum, p) => sum + p.size, 0),
          avg_quality:
            highQualityPhotos.reduce((sum, p) => sum + p.quality_score, 0) /
            highQualityPhotos.length,
          faces_count: highQualityPhotos.reduce(
            (sum, p) => sum + p.faces_count,
            0,
          ),
          locations_count: highQualityPhotos.filter((p) => p.location).length,
          date_range: {
            start: new Date(
              Math.min(...highQualityPhotos.map((p) => p.created_at.getTime())),
            ),
            end: new Date(
              Math.max(...highQualityPhotos.map((p) => p.created_at.getTime())),
            ),
          },
        },
      });
    }

    // ألبوم الصور بوجوه
    const photosWithFaces = allPhotos.filter((p) => p.faces_count > 0);
    if (photosWithFaces.length > 0) {
      autoAlbums.push({
        id: "with-faces",
        name: "صور الأشخاص",
        type: "auto",
        photos: photosWithFaces,
        created_at: new Date(),
        updated_at: new Date(),
        tags: ["أشخاص", "وجوه"],
        color_theme: "#3b82f6",
        is_private: false,
        is_archived: false,
        cover_photo: photosWithFaces[0],
        stats: {
          total_photos: photosWithFaces.length,
          total_size: photosWithFaces.reduce((sum, p) => sum + p.size, 0),
          avg_quality:
            photosWithFaces.reduce((sum, p) => sum + p.quality_score, 0) /
            photosWithFaces.length,
          faces_count: photosWithFaces.reduce(
            (sum, p) => sum + p.faces_count,
            0,
          ),
          locations_count: photosWithFaces.filter((p) => p.location).length,
          date_range: {
            start: new Date(
              Math.min(...photosWithFaces.map((p) => p.created_at.getTime())),
            ),
            end: new Date(
              Math.max(...photosWithFaces.map((p) => p.created_at.getTime())),
            ),
          },
        },
      });
    }

    // ألبوم الصور بنصوص
    const photosWithText = allPhotos.filter((p) => p.has_text);
    if (photosWithText.length > 0) {
      autoAlbums.push({
        id: "with-text",
        name: "صور بنصوص",
        type: "auto",
        photos: photosWithText,
        created_at: new Date(),
        updated_at: new Date(),
        tags: ["نصوص", "كتابة"],
        color_theme: "#8b5cf6",
        is_private: false,
        is_archived: false,
        cover_photo: photosWithText[0],
        stats: {
          total_photos: photosWithText.length,
          total_size: photosWithText.reduce((sum, p) => sum + p.size, 0),
          avg_quality:
            photosWithText.reduce((sum, p) => sum + p.quality_score, 0) /
            photosWithText.length,
          faces_count: photosWithText.reduce(
            (sum, p) => sum + p.faces_count,
            0,
          ),
          locations_count: photosWithText.filter((p) => p.location).length,
          date_range: {
            start: new Date(
              Math.min(...photosWithText.map((p) => p.created_at.getTime())),
            ),
            end: new Date(
              Math.max(...photosWithText.map((p) => p.created_at.getTime())),
            ),
          },
        },
      });
    }

    // ألبومات حسب السنة
    const photosByYear = allPhotos.reduce(
      (acc, photo) => {
        const year = photo.created_at.getFullYear();
        if (!acc[year]) acc[year] = [];
        acc[year].push(photo);
        return acc;
      },
      {} as Record<number, SmartPhoto[]>,
    );

    Object.entries(photosByYear).forEach(([year, yearPhotos]) => {
      if (yearPhotos.length > 10) {
        // فقط السنوات التي بها صور كثيرة
        autoAlbums.push({
          id: `year-${year}`,
          name: `صور ${year}`,
          type: "auto",
          photos: yearPhotos,
          created_at: new Date(),
          updated_at: new Date(),
          tags: [year, "سنة"],
          color_theme: "#f59e0b",
          is_private: false,
          is_archived: false,
          cover_photo: yearPhotos[0],
          stats: {
            total_photos: yearPhotos.length,
            total_size: yearPhotos.reduce((sum, p) => sum + p.size, 0),
            avg_quality:
              yearPhotos.reduce((sum, p) => sum + p.quality_score, 0) /
              yearPhotos.length,
            faces_count: yearPhotos.reduce((sum, p) => sum + p.faces_count, 0),
            locations_count: yearPhotos.filter((p) => p.location).length,
            date_range: {
              start: new Date(
                Math.min(...yearPhotos.map((p) => p.created_at.getTime())),
              ),
              end: new Date(
                Math.max(...yearPhotos.map((p) => p.created_at.getTime())),
              ),
            },
          },
        });
      }
    });

    return autoAlbums;
  }, [albums, enableAutoAlbums]);

  // دمج الألبومات العادية مع التلقائية
  const allAlbums = useMemo(() => {
    return [...autoGeneratedAlbums, ...albums];
  }, [albums, autoGeneratedAlbums]);

  // فلترة وترتيب الألبومات
  const filteredAndSortedAlbums = useMemo(() => {
    let filtered = allAlbums;

    // فلترة حسب النوع
    if (filterType !== "all") {
      filtered = filtered.filter((album) => album.type === filterType);
    }

    // فلترة حسب البحث
    if (searchQuery) {
      filtered = filtered.filter(
        (album) =>
          album.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
          album.description
            ?.toLowerCase()
            .includes(searchQuery.toLowerCase()) ||
          album.tags.some((tag) =>
            tag.toLowerCase().includes(searchQuery.toLowerCase()),
          ),
      );
    }

    // ترتيب
    filtered.sort((a, b) => {
      let comparison = 0;

      switch (sortBy) {
        case "name":
          comparison = a.name.localeCompare(b.name);
          break;
        case "date":
          comparison = a.updated_at.getTime() - b.updated_at.getTime();
          break;
        case "size":
          comparison = a.stats.total_size - b.stats.total_size;
          break;
        case "photos":
          comparison = a.stats.total_photos - b.stats.total_photos;
          break;
      }

      return sortDirection === "asc" ? comparison : -comparison;
    });

    return filtered;
  }, [allAlbums, filterType, searchQuery, sortBy, sortDirection]);

  const handleCreateAlbum = () => {
    if (newAlbumName.trim() && onAlbumCreate) {
      onAlbumCreate(newAlbumName.trim(), "manual");
      setNewAlbumName("");
      setIsCreatingAlbum(false);
    }
  };

  const handlePhotoSelection = (photoId: string) => {
    setSelectedPhotos((prev) => {
      const newSet = new Set(prev);
      if (newSet.has(photoId)) {
        newSet.delete(photoId);
      } else {
        newSet.add(photoId);
      }
      return newSet;
    });
  };

  const formatFileSize = (bytes: number) => {
    const sizes = ["B", "KB", "MB", "GB"];
    if (bytes === 0) return "0 B";
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return Math.round((bytes / Math.pow(1024, i)) * 100) / 100 + " " + sizes[i];
  };

  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat("ar", {
      year: "numeric",
      month: "long",
      day: "numeric",
    }).format(date);
  };

  // مكون بطاقة الألبوم
  const AlbumCard = React.memo(({ album }: { album: SmartAlbum }) => {
    const isSelected = selectedAlbum?.id === album.id;
    const coverPhoto = album.cover_photo || album.photos[0];

    return (
      <motion.div
        layout
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.9 }}
        whileHover={{ y: -4 }}
        className={cn(
          "relative bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden",
          "cursor-pointer border-2 transition-all duration-300",
          isSelected
            ? "border-blue-500 ring-2 ring-blue-200"
            : "border-transparent hover:border-gray-300",
          album.is_archived && "opacity-60",
        )}
        onClick={() => onAlbumSelect?.(album)}
      >
        {/* صورة الغلاف */}
        <div className="relative aspect-video overflow-hidden bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-700 dark:to-gray-800">
          {coverPhoto ? (
            <img
              src={coverPhoto.thumbnailUrl || coverPhoto.previewUrl}
              alt={album.name}
              className="w-full h-full object-cover"
              loading="lazy"
            />
          ) : (
            <div className="w-full h-full flex items-center justify-center">
              <FileImage className="w-12 h-12 text-gray-400" />
            </div>
          )}

          {/* تراكب نوع الألبوم */}
          <div className="absolute top-2 left-2">
            <Badge
              variant="secondary"
              className={cn(
                "text-xs",
                album.type === "auto" && "bg-green-500/80 text-white",
                album.type === "smart" && "bg-blue-500/80 text-white",
                album.type === "manual" && "bg-gray-500/80 text-white",
              )}
            >
              {album.type === "auto" && <Zap className="w-3 h-3 mr-1" />}
              {album.type === "smart" && <Brain className="w-3 h-3 mr-1" />}
              {album.type === "manual" && <Folder className="w-3 h-3 mr-1" />}
              {album.type === "auto"
                ? "تلقائي"
                : album.type === "smart"
                  ? "ذكي"
                  : "يدوي"}
            </Badge>
          </div>

          {/* أزرار التحكم */}
          <div className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button
                  size="sm"
                  variant="secondary"
                  className="w-8 h-8 p-0 backdrop-blur-sm bg-white/80"
                >
                  <MoreHorizontal className="w-4 h-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuItem>
                  <Edit3 className="w-4 h-4 mr-2" />
                  تحرير
                </DropdownMenuItem>
                <DropdownMenuItem>
                  <Share2 className="w-4 h-4 mr-2" />
                  مشاركة
                </DropdownMenuItem>
                <DropdownMenuItem>
                  <Download className="w-4 h-4 mr-2" />
                  تصدير
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem>
                  <Archive className="w-4 h-4 mr-2" />
                  أرشفة
                </DropdownMenuItem>
                {album.type !== "auto" && (
                  <DropdownMenuItem className="text-red-600">
                    <Trash2 className="w-4 h-4 mr-2" />
                    حذف
                  </DropdownMenuItem>
                )}
              </DropdownMenuContent>
            </DropdownMenu>
          </div>

          {/* شارات إضافية */}
          <div className="absolute bottom-2 left-2 flex gap-1">
            {album.is_private && (
              <Badge
                variant="secondary"
                className="bg-red-500/80 text-white text-xs"
              >
                <Lock className="w-3 h-3" />
              </Badge>
            )}
            {album.color_theme && (
              <div
                className="w-4 h-4 rounded-full border-2 border-white shadow-sm"
                style={{ backgroundColor: album.color_theme }}
              />
            )}
          </div>

          {/* عدد الصور */}
          <div className="absolute bottom-2 right-2">
            <Badge
              variant="secondary"
              className="bg-black/60 text-white text-xs"
            >
              {album.stats.total_photos} صورة
            </Badge>
          </div>
        </div>

        {/* معلومات الألبوم */}
        <div className="p-4 space-y-2">
          <div className="flex items-center justify-between">
            <h3 className="font-semibold text-lg truncate" title={album.name}>
              {album.name}
            </h3>
            {album.stats.avg_quality > 0.8 && (
              <Star className="w-4 h-4 text-yellow-500 fill-current" />
            )}
          </div>

          {album.description && (
            <p className="text-sm text-gray-600 dark:text-gray-400 line-clamp-2">
              {album.description}
            </p>
          )}

          {/* إحصائيات سريعة */}
          <div className="grid grid-cols-2 gap-2 text-xs text-gray-500">
            <div className="flex items-center">
              <FileImage className="w-3 h-3 mr-1" />
              {album.stats.total_photos} صورة
            </div>
            <div className="flex items-center">
              <Activity className="w-3 h-3 mr-1" />
              {formatFileSize(album.stats.total_size)}
            </div>
            {album.stats.faces_count > 0 && (
              <div className="flex items-center">
                <Users className="w-3 h-3 mr-1" />
                {album.stats.faces_count} وجه
              </div>
            )}
            {album.stats.locations_count > 0 && (
              <div className="flex items-center">
                <MapPin className="w-3 h-3 mr-1" />
                {album.stats.locations_count} موقع
              </div>
            )}
          </div>

          {/* العلامات */}
          {album.tags.length > 0 && (
            <div className="flex flex-wrap gap-1">
              {album.tags.slice(0, 3).map((tag, index) => (
                <Badge key={index} variant="outline" className="text-xs">
                  {tag}
                </Badge>
              ))}
              {album.tags.length > 3 && (
                <Badge variant="outline" className="text-xs">
                  +{album.tags.length - 3}
                </Badge>
              )}
            </div>
          )}

          {/* تاريخ آخر تحديث */}
          <div className="flex items-center text-xs text-gray-500">
            <Clock className="w-3 h-3 mr-1" />
            آخر تحديث: {formatDate(album.updated_at)}
          </div>
        </div>
      </motion.div>
    );
  });

  return (
    <div className="space-y-6">
      {/* رأس القسم */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">الألبومات الذكية</h2>
          <p className="text-gray-600 dark:text-gray-400">
            تنظيم تلقائي وذكي لصورك
          </p>
        </div>

        <div className="flex items-center space-x-2">
          <Button
            onClick={() => setIsCreatingAlbum(true)}
            className="bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white"
          >
            <FolderPlus className="w-4 h-4 mr-2" />
            ألبوم جديد
          </Button>
        </div>
      </div>

      {/* شريط البحث والفلاتر */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
          <Input
            placeholder="البحث في الألبومات..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-10"
          />
        </div>

        <div className="flex items-center space-x-2">
          <Select value={filterType} onValueChange={setFilterType as any}>
            <SelectTrigger className="w-32">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">الكل</SelectItem>
              <SelectItem value="manual">يدوي</SelectItem>
              <SelectItem value="smart">ذكي</SelectItem>
              <SelectItem value="auto">تلقائي</SelectItem>
            </SelectContent>
          </Select>

          <Select value={sortBy} onValueChange={setSortBy as any}>
            <SelectTrigger className="w-32">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="date">التاريخ</SelectItem>
              <SelectItem value="name">الاسم</SelectItem>
              <SelectItem value="photos">عدد الصور</SelectItem>
              <SelectItem value="size">الحجم</SelectItem>
            </SelectContent>
          </Select>

          <Button
            variant="outline"
            size="sm"
            onClick={() =>
              setSortDirection((prev) => (prev === "asc" ? "desc" : "asc"))
            }
          >
            {sortDirection === "asc" ? (
              <SortAsc className="w-4 h-4" />
            ) : (
              <SortDesc className="w-4 h-4" />
            )}
          </Button>
        </div>
      </div>

      {/* إحصائيات عامة */}
      {showStats && (
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-blue-600">
                {allAlbums.length}
              </div>
              <div className="text-sm text-gray-600">إجمالي الألبومات</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-green-600">
                {allAlbums.reduce(
                  (sum, album) => sum + album.stats.total_photos,
                  0,
                )}
              </div>
              <div className="text-sm text-gray-600">إجمالي الصور</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-purple-600">
                {autoGeneratedAlbums.length}
              </div>
              <div className="text-sm text-gray-600">ألبومات تلقائية</div>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4 text-center">
              <div className="text-2xl font-bold text-yellow-600">
                {formatFileSize(
                  allAlbums.reduce(
                    (sum, album) => sum + album.stats.total_size,
                    0,
                  ),
                )}
              </div>
              <div className="text-sm text-gray-600">الحجم الإجمالي</div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* قائمة الألبومات */}
      {filteredAndSortedAlbums.length > 0 ? (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
          <AnimatePresence>
            {filteredAndSortedAlbums.map((album) => (
              <AlbumCard key={album.id} album={album} />
            ))}
          </AnimatePresence>
        </div>
      ) : (
        <div className="text-center py-16">
          <Folder className="w-16 h-16 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-600 mb-2">
            لا توجد ألبومات تطابق البحث
          </h3>
          <p className="text-gray-500 mb-4">
            جرب تغيير معايير البحث أو إنشاء ألبوم جديد
          </p>
          <Button onClick={() => setIsCreatingAlbum(true)} variant="outline">
            <FolderPlus className="w-4 h-4 mr-2" />
            إنشاء ألبوم جديد
          </Button>
        </div>
      )}

      {/* نافذة إنشاء ألبوم جديد */}
      {isCreatingAlbum && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <Card className="w-full max-w-md mx-4">
            <CardHeader>
              <CardTitle>إنشاء ألبوم جديد</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <label className="text-sm font-medium">اسم الألبوم</label>
                <Input
                  value={newAlbumName}
                  onChange={(e) => setNewAlbumName(e.target.value)}
                  placeholder="أدخل اسم الألبوم..."
                  onKeyPress={(e) => e.key === "Enter" && handleCreateAlbum()}
                />
              </div>
              <div className="flex justify-end space-x-2">
                <Button
                  variant="outline"
                  onClick={() => {
                    setIsCreatingAlbum(false);
                    setNewAlbumName("");
                  }}
                >
                  إلغاء
                </Button>
                <Button
                  onClick={handleCreateAlbum}
                  disabled={!newAlbumName.trim()}
                >
                  إنشاء
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}

export default SmartAlbumView;
